<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构与算法 on Corax Blog</title>
    <link>https://corax.com.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 数据结构与算法 on Corax Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>John Doe - All rights reserved</copyright>
    <lastBuildDate>Wed, 15 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://corax.com.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>排序与表达式专题</title>
      <link>https://corax.com.cn/note/datastructure/sort/</link>
      <pubDate>Wed, 15 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://corax.com.cn/note/datastructure/sort/</guid>
      <description>内排序 对内存中的n个对象进行排序，不需要借助外存
插入排序 $Insert~Sorting$
直接插入排序 算法思想
将需要排序的数组分为排好序和未排序的两部分，每次从未排序部分中取出首元素插入到排好序的部分中（需要包含将部分数组整体后移的过程）
代码示例
int pos; //数组从0开始标号 for(int i = 1; i &amp;lt; n; i++){ //需要插入a[i] int t = a[i]; //找出插入位置的同时移动数组 for(pos = i - 1; pos &amp;gt; 0 &amp;amp;&amp;amp; a[pos] &amp;gt; a[i]; pos--) a[pos] = a[pos - 1]; a[pos] = t; } 过程示例</description>
    </item>
    
    <item>
      <title>图论专题</title>
      <link>https://corax.com.cn/note/datastructure/graph/</link>
      <pubDate>Wed, 08 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://corax.com.cn/note/datastructure/graph/</guid>
      <description>概念与定义 图(Graph) 图是由点集$V(vertex)$和边集$E(edge)$组成的数据结构，其中可以分为无向图和有向图
完全图(Complete Graph) 对于有$n$个节点的无向图，如果它的边集大小为$\frac{n*(n-1)}{2}$，即每两个节点之间都有连边，则称其为完全图
度数(degree) 节点的度数（degree，记为$TD(v)$）就是与之相连的边的条数
特别的，对于有向图(digraph)而言，节点的入度（in-degree，记为$ID(v)$）是指向它的边的条数，出度（out-degree，记为$OD(v)$）是由它指出的边的条数，显然有$TD(v)=ID(v)+OD(v)$
子图(Subgraph) 点集是原点集子集，边集是原边集子集，且边集中的节点都在点集中的图
路径(Path) 一个满足前一个节点到后一个节点有连边的节点序列
简单路径和简单环路 简单路径中不包含重复顶点；简单环路除了首尾节点重复，其它均满足简单路径的要求
连通图和连通分量 对于无向图而言，如果任意两个节点之间都有路径可达，则将其称为连通图；非连通图的极大连通子图称为连通分量
强连通图和强连通分量 对于有向图而言，如果任意两个节点之间（既包含从a到b，也包含从b到a）均有路径可达，则将其称为强连通图；非强连通图的极大强连通子图称为强连通分量
网络 网络是指带权图或带权有向图
生成树 生成树是一张图的极小连通子图，有且仅有n个顶点和n-1条边
图的表示方法 邻接矩阵(Adjacency Matrix) 01矩阵，第i行和第j列置1表示从i到j有一条边，否则没有，无向图的邻接矩阵对称</description>
    </item>
    
    <item>
      <title>哈希与堆专题</title>
      <link>https://corax.com.cn/note/datastructure/hashheap/</link>
      <pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://corax.com.cn/note/datastructure/hashheap/</guid>
      <description>哈希/散列表 负载因子 $Load~Factor$，也称为冲突因子，记为α，有$\alpha=\frac{数据个数}{空闲个数}$，若α&amp;gt;1，则发生碰撞的概率高，常数复杂度不可达；若α&amp;lt;1，则发生碰撞的概率相对较低，有可能达到常数复杂度
哈希函数 $Hash~Function$，也称为散列函数，用于从给定的数据映射到一个代表地址的数值
取余法 $H(Key)=Key\mod M$，其中M是在基本区长度内的最大质数，尽可能降低冲突概率
平方取中法 $H(Key)=Key^2$十进制数字表示的中间部分，其长度取决于存储数据的哈希表的大小
乘法杂凑函数 $H(Key)=\lfloor M*((\phi*Key)\mod 1)\rfloor$，其中M为最大单元的下标，φ一般取为小于1的无理数，mod 1表示只保留小数部分
冲突处理 挂载单链表 将发生冲突的值以链表的形式挂载在同一地址的哈希表下，但是一般很少用这种方式，因为整个散列表空间很大，如果将申请的空间弃置不用而为链表申请额外空间是对内存资源的浪费
开放地址法 $Open~Addressing$，做法是向散列表后续的空间探测，直到发现空位置就将它存入其中，存入过程的探测时间和查找过程的探测时间成正比；当散列表中的某个数据需要删去时并不真正删掉它，而只是标记它被删去，被标记删去的数据可以被后来的数据替代，在查找过程中如果探测到空位置就认为需要查找的数据不在散列表中；如果存入某个数据后散列表中的数据条目数量大于设定值，即负载因子大于设定值，则需要扩大散列表的容量，重新进行散列(rehash)，该过程会将已经散列好的数据也重新散列，因此会带来较大的时间开销
平均搜索长度指的是假设各个数据被查找的概率相等，用查找每个数据需要的探测次数计算平均值
线性探测法(Linear Probing)
依次探测下一个位置，到最大值则从0继续。容易出现堆积问题(Clustering Problem)，即如果有一批数据的散列值很接近，就会导致对应内存空间的散列表被全部占满，只要再次出现散列值在其附近的数据就一定会引发冲突，继续在该空间插入数据的代价会很大</description>
    </item>
    
    <item>
      <title>树专题</title>
      <link>https://corax.com.cn/note/datastructure/tree/</link>
      <pubDate>Sun, 05 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://corax.com.cn/note/datastructure/tree/</guid>
      <description>基本术语 节点的度数(Degree) 一个节点的子节点个数
树的度数 所有节点度数的最大值
叶节点(Leaf) 度数为0的节点
枝干(Branch) 度数不为0的节点
层次(Level) 根节点层次一般为0（有时为1），其余节点的层次为其父节点层次+1
高度(Depth/Height) 树的节点中层次的最大值，所以可能为0
二叉树(Binary Tree) 每个节点的度数最大为2，其子树具有左右子树的次序性，重要性质如下：
有n个节点的二叉树有且仅有n-1条边（同样适用于树） 第$i$层的节点个数最多为$2^i$，其中树根位于第0层 高度为$h$的二叉树最少有$h+1$个节点，最多有$2^{h+1}-1$个节点，其中树根位于第0层 如果叶节点的个数为$n_0$，度数为2的节点个数为$n_2$，则有$n_0=n_2+1$（$n=n_0+n_1+n_2=n_1+2*n_2+1[root]$） 含有$n$个节点的树的树高最大为$n-1$，最小为$\lceil log_2(n+1)\rceil-1$，其中树根位于第0层 如果将二叉树的节点按从上到下，从左到右的顺序标号（从0开始），则第$i$个节点的父节点为$\lfloor(i-1)/2\rfloor$（从1开始标号则为$\lfloor\frac{i}{2}\rfloor$），左子节点为$2* i+1$ ，右子节点为$2 * i+2$（从1开始则分别为$2 * i$和 $2 * i+1$ ） 满二叉树(Full Binary Tree) 每一层的节点全满，即树高为$h$的满二叉树的节点个数一定是$2^{h+1}-1$，其中树根位于第0层</description>
    </item>
    
  </channel>
</rss>
